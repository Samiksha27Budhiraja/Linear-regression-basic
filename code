import numpy as np
import pandas as pd  
from sklearn.datasets import load_boston
boston_dataset = load_boston()
print(boston_dataset)
print(boston_dataset.DESCR)
boston = pd.DataFrame(boston_dataset.data, columns=boston_dataset.feature_names)
boston
boston.head()
boston['MEDV'] = boston_dataset.target
print(boston['MEDV'])
features = ['ZN', 'RM']
target = boston['MEDV']
X = pd.DataFrame(np.c_[boston['ZN'], boston['RM']], columns = ['ZN','RM'])
print (X)
Y = boston['MEDV']
print (Y)
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)
# model evaluation for testing set
y_test_predict = lin_model.predict(X_test)

rmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))
print(y_test_predict)
print(Y_test)

print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
